# Source: https://stackoverflow.com/questions/273743/using-wget-to-recursively-fetch-a-directory-with-arbitrary-files-in-it
wgetod() {
  if [ $# -ne 1 ]; then
    echo "usage: wgetod [host]"
  else
    NSLASH="$(echo "$1" | perl -pe 's|.*://[^/]+(.*?)/?$|\1|' | grep -o / | wc -l)"
    NCUT=$((NSLASH > 0 ? NSLASH-1 : 0))
    wget -r -nH --user-agent=Mozilla/5.0 --cut-dirs=$NCUT --no-parent --reject="index.html*" "$1"
  fi
}

# Display the weather using wttr.in
# Source: https://gist.github.com/kjbrum/77b7af04191267b053e9
weather() {
  location="$1"
  curl "http://wttr.in/$location?lang=sv"
}

# Make new directory and cd into it
mkcd() {
  if [ $# -ne 1 ]; then
    echo "usage: mkcd [dir]"
  else
    mkdir $1 && cd $1
  fi
}

# Print public SSH key, generate it if necessary
# Source: https://github.com/sapegin/dotfiles/blob/master/bin/ssh-key
ssh-key() {
  file="$HOME/.ssh/id_rsa.pub"
  if [ ! -f "$file" ]; then
    ssh-keygen -t rsa
  fi
  cat "$file"
}

testcolors() {
  awk 'BEGIN{
    s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
      r = 255-(colnum*255/76);
      g = (colnum*510/76);
      b = (colnum*255/76);
      if (g>255) g = 510-g;
        printf "\033[48;2;%d;%d;%dm", r,g,b;
        printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
        printf "%s\033[0m", substr(s,colnum+1,1);
      }
      printf "\n";
    }'
}

# Configure git author locally in the current repo
gitconfig() {
  if [ $# -ne 2 ]; then
    echo "usage: gitconfig <name> <email>"
    return 1
  fi
  git config user.name "$1"
  git config user.email "$2"
}

# Get the combined changes of all commits with a
# particular identifier in the commit message.
# WIP (breaks on merge commits for instance)
storydiff() {( set -e
  if [ $# -ne 1 ]; then
    echo "usage: storydiff <regex>"
    return 1
  fi
  tmp_branch="storydiff-tmp"
  if git rev-parse --quiet --verify $tmp_branch > /dev/null; then
    echo "Temporary branch $tmp_branch already exists."
    echo "Delete it if it's not used for something else."
    return 1
  fi
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  hashes=$(git log --reverse --grep="$1" --pretty=format:%H)
  oldest=$(echo $hashes | head -n 1)
  others=$(echo $hashes | tail -n +2)
  git branch $tmp_branch $oldest
  git checkout $tmp_branch
  while IFS=" " read -r hash; do
      git cherry-pick $hash --strategy-option theirs --keep-redundant-commits
  done <<< "$others"
  git diff ${oldest}^ $tmp_branch
  git checkout $current_branch
  git branch -D $tmp_branch
)}
